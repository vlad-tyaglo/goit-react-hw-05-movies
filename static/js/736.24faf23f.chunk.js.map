{"version":3,"file":"static/js/736.24faf23f.chunk.js","mappings":"+SAEAA,EAAAA,EAAAA,SAAAA,QAAyB,6BACzB,IAAMC,EAAU,mCAET,SAAgBC,EAAvB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,uFACoBH,EAAAA,EAAAA,IAAA,wCAA2CC,EAA3C,iBAA2DE,IAD/E,cACGC,EADH,yBAEIA,EAASC,MAFb,kEAKA,SAAeC,EAAtB,iDAAO,OAAP,oBAAO,WAAgCC,EAAOJ,GAAvC,uFACoBH,EAAAA,EAAAA,IAAA,kCAAqCC,EAArC,iCAAqEM,EAArE,4CAA8GJ,IADlI,cACGC,EADH,yBAEIA,EAASC,MAFb,kEAKA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,uFACoBT,EAAAA,EAAAA,IAAA,mBAAsBS,EAAtB,oBAAoCR,EAApC,oBADpB,cACGG,EADH,yBAEIA,EAASC,MAFb,kEAKA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA8BD,GAA9B,uFACoBT,EAAAA,EAAAA,IAAA,mBAAsBS,EAAtB,4BAA4CR,EAA5C,oBADpB,cACGG,EADH,yBAEIA,EAASC,MAFb,kEAKA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAAiCF,GAAjC,uFACoBT,EAAAA,EAAAA,IAAA,mBAAsBS,EAAtB,4BAA4CR,EAA5C,2BADpB,cACGG,EADH,yBAEIA,EAASC,MAFb,kE,kKCvBMO,EAAUC,EAAAA,GAAAA,QAAH,qFAMPC,EAAOD,EAAAA,GAAAA,GAAH,4EAMJE,EAAWF,EAAAA,GAAAA,GAAH,oUAaRG,EAAYH,EAAAA,GAAAA,IAAH,0IAQTI,EAAOJ,EAAAA,GAAAA,GAAH,kD,SCOjB,EAnCa,WACT,IAAQJ,GAAOS,EAAAA,EAAAA,MAAPT,GACR,GAA4BU,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KAgBF,OAdEC,EAAAA,EAAAA,YAAU,WAAM,wCACZ,WAAyBb,GAAzB,4FAC2BC,EAAAA,EAAAA,IAAeD,GAD1C,gBACYc,EADZ,EACYA,KACFC,EAAQD,EAAKE,KAAI,kBAA4C,CAC/DhB,GADmB,EAAGA,GAEtBiB,KAFmB,EAAOA,KAG1BC,IAHmB,EAAaC,aAIhCC,UAJmB,EAA2BA,UAA3B,IAMvBR,EAAUG,GARd,2CADY,yBAAC,SAAD,2BAWhBM,CAAUrB,EACT,GAAE,CAACA,KAGF,SAACG,EAAD,UACuB,IAAlBQ,EAAOW,QACH,SAACjB,EAAD,UACIM,EAAOK,KAAK,gBAAGhB,EAAH,EAAGA,GAAIkB,EAAP,EAAOA,IAAKD,EAAZ,EAAYA,KAAMG,EAAlB,EAAkBA,UAAlB,OACT,UAACd,EAAD,YACI,gBAAKY,IAAKA,EAAG,0CAAsCA,GA1BxD,gGA0B8EK,IAAKN,KAC9E,UAACV,EAAD,YACI,SAACC,EAAD,UAAOS,KACP,uCAAeG,UAJRpB,EADN,OAQL,uFAGzB,C","sources":["API.js","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org';\nconst API_KEY = '7f364168711f1cf5c7d114ad640a94cd';\n\nexport async function  fetchTrendMovies(page) {\n    const response = await axios.get(`/3/trending/movie/day?api_key=${API_KEY}&page=${page}`);\n    return response.data;\n}\n\nexport async function fetchMovieByName(query, page) {\n    const response = await axios.get(`/3/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false&page=${page}`);\n    return response.data;\n}\n\nexport async function fetchMovieById(id) {\n    const response = await axios.get(`/3/movie/${id}?api_key=${API_KEY}&language=en-US`);\n    return response.data;\n}\n\nexport async function fetchMovieCast(id) {\n    const response = await axios.get(`/3/movie/${id}/credits?api_key=${API_KEY}&language=en-US`);\n    return response.data;\n}\n\nexport async function fetchMovieReviews(id) {\n    const response = await axios.get(`/3/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`);\n    return response.data;\n}","import styled from \"styled-components\";\n\nexport const Section = styled.section`\n  max-width: 1200px;\n  padding: 20px 0;\n  margin: 0 auto;\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 12px;\n`;\n\nexport const ListItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  width: calc((100% - 36px) / 4);\n  border-radius: 5px;\n  box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.2), 0px 1px 1px rgba(0, 0, 0, 0.14),\n        0px 2px 1px rgba(0, 0, 0, 0.2);\n  & img {\n    /* flex-grow: 1; */\n  }\n`;\n\nexport const ActorInfo = styled.div`\n  /* flex-grow: 1; */\n  box-sizing: border-box;\n  height: 112px;\n  padding: 20px 12px;\n  text-align: center;\n`\n\nexport const Name = styled.h3`\n    margin-bottom: 12px;\n`","import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { fetchMovieCast } from \"API\";\nimport { List, ListItem, Section, ActorInfo, Name } from \"./Cast.styled\";\n\nconst defaultImage = 'https://cdn.the-village.ru/the-village.ru/post_image-image/1jHOb464jtkGWX8LGBnHHw-article.png';\n\nconst Cast = () => {\n    const { id } = useParams();\n    const [actors, setActors] = useState([]);\n  \n    useEffect(() => {\n        async function fetchCast(id) {\n            const { cast } = await fetchMovieCast(id);\n            const casts = cast.map(({ id, name, profile_path, character }) => ({\n                id,\n                name,\n                src: profile_path,\n                character,\n            }))\n            setActors(casts);\n    }\n    fetchCast(id);\n    }, [id])\n    \n  return (\n      <Section>\n          {actors.length !== 0 ?\n              (<List>\n                  {actors.map((({ id, src, name, character }) => (\n                      <ListItem key={id}>\n                          <img src={src ? `https://image.tmdb.org/t/p/w500/${src}` : defaultImage} alt={name} />\n                          <ActorInfo>\n                              <Name>{name}</Name>\n                              <p>Character: {character}</p>\n                          </ActorInfo>\n                      </ListItem>)))}\n              </List>) : (<p>We don't have any additional information about this movie.</p>)}\n    </Section>\n  );\n};\n\nexport default Cast;"],"names":["axios","API_KEY","fetchTrendMovies","page","response","data","fetchMovieByName","query","fetchMovieById","id","fetchMovieCast","fetchMovieReviews","Section","styled","List","ListItem","ActorInfo","Name","useParams","useState","actors","setActors","useEffect","cast","casts","map","name","src","profile_path","character","fetchCast","length","alt"],"sourceRoot":""}